<style>
  .custom-grid { padding: 4rem 2rem; text-align: center; }
  .custom-grid h2 { font-size: 2.2rem; font-weight: 700; margin-bottom: 2rem; }
  .grid-gallery { display: grid; grid-template-columns: repeat(3, 1fr); gap: 1.5rem; }
  .grid-item { position: relative; overflow: hidden; border-radius: 10px; background: #fafafa; padding: 1rem; transition: box-shadow 0.2s ease-in-out; }
  .grid-item:hover { box-shadow: 0 6px 15px rgba(0,0,0,0.1); }
  .grid-item img { width: 100%; height: auto; display: block; margin-bottom: 0.75rem; border-radius: 8px; }
  .grid-item h3 { font-size: 1rem; font-weight: 600; margin: 0.5rem 0; }
  .grid-item p { font-size: 0.9rem; color: #333; margin: 0; }
  .grid-item .hotspot { position: absolute; top: 12px; right: 12px; width: 32px; height: 32px; border-radius: 50%; background: white; color: black; display: flex; align-items: center; justify-content: center; font-size: 1rem; font-weight: bold; cursor: pointer; box-shadow: 0 4px 10px rgba(0,0,0,0.15); transition: transform 0.2s ease-in-out; }
  .grid-item .hotspot:hover { transform: scale(1.1); }

  /* Modal Styles */
  .product-modal { display: none; position: fixed; z-index: 999; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background: rgba(0,0,0,0.6); }
  .product-modal-content { background: #fff; margin: 5% auto; padding: 2rem; border-radius: 10px; width: 90%; max-width: 500px; position: relative; text-align: left; }
  .product-modal .close-modal { position: absolute; top: 10px; right: 15px; font-size: 1.5rem; font-weight: bold; cursor: pointer; }

  .product-options { margin-top: 1rem; }
  .product-options label { display: block; margin: 0.5rem 0 0.2rem; font-weight: 600; }
  .product-options select { width: 100%; padding: 0.4rem; margin-bottom: 0.8rem; border-radius: 5px; border: 1px solid #ccc; }
  .add-to-cart-btn { display: inline-block; margin-top: 1rem; background:#000; color:#fff; padding:0.5rem 1rem; border-radius:5px; cursor:pointer; text-align:center; width:100%; }
</style>

<section class="custom-grid">
  <h2>{{ section.settings.grid_title }}</h2>

  <div class="grid-gallery">
    {% for block in section.blocks %}
      {% if block.settings.product != blank %}
        {% assign product = all_products[block.settings.product] %}
        {% assign first_available_variant = product.variants | where: "available", true | first %}

        <div class="grid-item">
          <img src="{{ product.featured_image | img_url: '500x' }}" alt="{{ product.title }}">
          <h3>{{ product.title }}</h3>
          <p>
            {% if first_available_variant %}
              {{ first_available_variant.price | money }}
            {% else %}
              <span style="color:red;">Sold Out</span>
            {% endif %}
          </p>
          <div class="hotspot" data-handle="{{ product.handle }}">+</div>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</section>

<!-- Modal HTML -->
<div id="product-modal" class="product-modal">
  <div class="product-modal-content">
    <span class="close-modal">&times;</span>
    <div id="modal-content-inner"></div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const modal = document.getElementById('product-modal');
  const modalInner = document.getElementById('modal-content-inner');
  const closeBtn = document.querySelector('.close-modal');

  document.querySelectorAll('.grid-item .hotspot').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      const productHandle = this.dataset.handle;

      fetch(`/products/${productHandle}.js`)
        .then(res => res.json())
        .then(product => {
          // Build options dropdowns
          let optionsHtml = '';
          if (product.options.length > 0) {
            product.options.forEach((optName, index) => {
              let valuesHtml = [...new Set(product.variants.map(v => v.options[index]))]
                .map(val => `<option value="${val}">${val}</option>`).join('');
              optionsHtml += `
                <div class="product-options">
                  <label>${optName}</label>
                  <select data-option-index="${index}">${valuesHtml}</select>
                </div>`;
            });
          }

          // Format price in dollars
          const firstVariantPrice = (product.variants[0].price / 100).toFixed(2);

          modalInner.innerHTML = `
            <h2>${product.title}</h2>
            <img src="${product.images[0]}" style="width:100%; border-radius:8px; margin-bottom:1rem;" />
            <p>${product.description}</p>
            <p style="font-weight:bold; margin-top:1rem;">Price: $${firstVariantPrice}</p>
            ${optionsHtml}
            <div class="add-to-cart-btn">Add to Cart</div>
          `;

          const addBtn = modalInner.querySelector('.add-to-cart-btn');
          addBtn.addEventListener('click', () => {
            const selects = modalInner.querySelectorAll('select');
            let selectedOptions = [];
            selects.forEach(s => selectedOptions.push(s.value));

            let variant = product.variants.find(v => 
              v.options.every((optVal, i) => optVal === selectedOptions[i])
            );

            if (!variant) { alert('Selected variant not available'); return; }

            fetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ id: variant.id, quantity: 1 })
            })
            .then(res => res.json())
            .then(data => {
              alert('Added to cart!');
              modal.style.display = 'none';
            });
          });

          modal.style.display = 'block';
        });
    });
  });

  closeBtn.addEventListener('click', () => modal.style.display = 'none');
  window.addEventListener('click', (e) => {
    if (e.target === modal) modal.style.display = 'none';
  });
});
</script>

{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [
    { "type": "text", "id": "grid_title", "label": "Grid Title", "default": "Tisso vision in the wild" }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [ { "type": "product", "id": "product", "label": "Select Product" } ]
    }
  ],
  "max_blocks": 6,
  "presets": [{ "name": "Custom Product Grid" }]
}
{% endschema %}

{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Grid Title",
      "default": "Featured Products"
    },
    {
      "type": "product",
      "id": "bonus_product",
      "label": "Soft Winter Jacket (auto-add product)",
      "info": "Select the 'Soft Winter Jacket' product that should be auto-added when a Black + Medium item is added to cart."
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Custom Product Grid",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<div class="custom-grid">
  <h2>{{ section.settings.title }}</h2>
  <div class="grid-container">
    {% for block in section.blocks %}
      {% assign product = all_products[block.settings.product] %}
      {% if product %}
        <div class="grid-item" data-product="{{ product.handle }}">
          <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
          <h3>{{ product.title }}</h3>
          <p>{{ product.price | money }}</p>
          <button class="open-popup" data-handle="{{ product.handle }}">+</button>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</div>

<!-- Modal -->
<div id="product-modal" class="modal hidden">
  <div class="modal-content">
    <span class="close">&times;</span>
    <div id="modal-body"></div>
  </div>
</div>

<style>
.custom-grid {
  padding: 20px;
}
.grid-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* always 3 per row */
  gap: 20px;
}
@media (max-width: 768px) {
  .grid-container {
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (max-width: 480px) {
  .grid-container {
    grid-template-columns: 1fr;
  }
}
.grid-item {
  border: 1px solid #eee;
  padding: 10px;
  text-align: center;
  position: relative;
  background: #fff;
}
.grid-item img {
  max-width: 100%;
  height: auto;
}
.open-popup {
  position: absolute;
  top: 10px;
  right: 10px;
}
.modal {
  position: fixed;
  top: 0; left: 0; right: 0; bottom: 0;
  background: rgba(0,0,0,0.7);
  z-index: 9999; /* above everything */
  display: flex;
  align-items: center;
  justify-content: center;
}
.modal.hidden {
  display: none;
}
.modal-content {
  background: #fff;
  padding: 20px;
  max-width: 500px;
  width: 90%;
  border-radius: 8px;
  position: relative;
  max-height: 90vh;
  overflow-y: auto;
}
.modal-content .close {
  position: absolute;
  top: 10px;
  right: 15px;
  cursor: pointer;
}
.toast {
  position: fixed;
  bottom: 20px;
  right: 20px;
  background: #333;
  color: #fff;
  padding: 10px 15px;
  border-radius: 5px;
  opacity: 0;
  transition: opacity .3s;
  z-index: 10000;
}
.toast.show {
  opacity: 1;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const modal = document.getElementById('product-modal');
  const modalBody = document.getElementById('modal-body');
  const closeModalBtn = modal.querySelector('.close');

  const bonusProductHandle = "{{ section.settings.bonus_product }}";
  let bonusProduct = null;

  // Load bonus product JSON
  if (bonusProductHandle) {
    fetch(`/products/${bonusProductHandle}.js`)
      .then(res => res.json())
      .then(data => { bonusProduct = data; })
      .catch(err => console.error('Bonus product error:', err));
  }

  // Open modal
  document.querySelectorAll('.open-popup').forEach(btn => {
    btn.addEventListener('click', async () => {
      const handle = btn.getAttribute('data-handle');
      const res = await fetch(`/products/${handle}.js`);
      const product = await res.json();

      let optionsHTML = '';
      product.options.forEach((opt, idx) => {
        optionsHTML += `<label>${opt.name}</label>
          <select data-index="${idx}">
            ${opt.values.map(val => `<option value="${val}">${val}</option>`).join('')}
          </select>`;
      });

      modalBody.innerHTML = `
        <img src="${product.featured_image}" style="max-width:100%;margin-bottom:10px;">
        <h2>${product.title}</h2>
        <p>${product.description}</p>
        <p><strong>Price: </strong>${(product.price/100).toFixed(2)}</p>
        ${optionsHTML}
        <button id="add-to-cart">Add to Cart</button>
      `;

      const addBtn = modalBody.querySelector('#add-to-cart');
      const selects = modalBody.querySelectorAll('select');

      const findMatchingVariant = () => {
        const chosen = Array.from(selects).map(sel => sel.value);
        return product.variants.find(v => JSON.stringify(v.options) === JSON.stringify(chosen));
      };

      addBtn.addEventListener('click', async () => {
        const variant = findMatchingVariant();
        if (!variant) { showToast('Variant not found'); return; }

        const selectedOptions = Array.from(selects).map(sel => sel.value.trim().toLowerCase());
        const hasBlack = selectedOptions.includes('black');
        const hasMedium = selectedOptions.includes('medium') || selectedOptions.includes('m');

        const items = [{ id: variant.id, quantity: 1 }];

        // Auto-add bonus product
        if (hasBlack && hasMedium && bonusProduct) {
          const bonusVar = bonusProduct.variants.find(v => v.available) || bonusProduct.variants[0];
          if (bonusVar) {
            items.push({ id: bonusVar.id, quantity: 1, properties: { _auto_added: 'Soft Winter Jacket' } });
          }
        }

        try {
          const res = await fetch('/cart/add.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ items })
          });
          if (!res.ok) throw new Error('Add failed');
          await res.json();
          showToast(items.length > 1 ? 'Products added to cart!' : 'Product added!');
          modal.classList.add('hidden');
        } catch (err) {
          console.error(err);
          showToast('Error adding to cart');
        }
      });

      modal.classList.remove('hidden');
    });
  });

  closeModalBtn.addEventListener('click', () => modal.classList.add('hidden'));

  // Toast helper
  function showToast(msg) {
    let toast = document.querySelector('.toast');
    if (!toast) {
      toast = document.createElement('div');
      toast.className = 'toast';
      document.body.appendChild(toast);
    }
    toast.textContent = msg;
    toast.classList.add('show');
    setTimeout(() => toast.classList.remove('show'), 3000);
  }
});
</script>

<style>
  .custom-grid { padding: 4rem 2rem; text-align: center; }
  .custom-grid h2 { font-size: 2.2rem; font-weight: 700; margin-bottom: 2rem; }
  .grid-gallery { display: grid; grid-template-columns: repeat(3, 1fr); gap: 1.5rem; }
  .grid-item { position: relative; overflow: hidden; border-radius: 10px; background: #fafafa; padding: 1rem; transition: box-shadow 0.2s ease-in-out; }
  .grid-item:hover { box-shadow: 0 6px 20px rgba(0,0,0,0.15); }
  .grid-item img { width: 100%; height: auto; display: block; margin-bottom: 0.75rem; border-radius: 8px; }
  .grid-item h3 { font-size: 1rem; font-weight: 600; margin: 0.5rem 0; }
  .grid-item p { font-size: 0.9rem; color: #333; margin: 0; }
  .grid-item .hotspot { position: absolute; top: 12px; right: 12px; width: 36px; height: 36px; border-radius: 50%; background: #fff; color: #000; display: flex; align-items: center; justify-content: center; font-size: 1.1rem; font-weight: bold; cursor: pointer; box-shadow: 0 5px 15px rgba(0,0,0,0.2); transition: transform 0.2s ease-in-out; }
  .grid-item .hotspot:hover { transform: scale(1.1); }

  /* Product Modal */
  .product-modal { display: none; position: fixed; z-index: 9999; left: 0; top: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.65); display: flex; align-items: center; justify-content: center; }
  .product-modal-content { background: #fff; border-radius: 12px; width: 90%; max-width: 500px; padding: 2rem; position: relative; text-align: center; box-shadow: 0 10px 30px rgba(0,0,0,0.25); }
  .product-modal .close-modal { position: absolute; top: 12px; right: 15px; font-size: 1.6rem; font-weight: bold; cursor: pointer; }

  .product-modal img { width: 100%; border-radius: 8px; margin-bottom: 1rem; }
  .product-modal h2 { margin-bottom: 0.5rem; font-size: 1.5rem; }
  .product-modal p { font-size: 0.95rem; color: #555; margin-bottom: 1rem; }

  .product-options { margin: 0.5rem 0; text-align: left; }
  .product-options label { display: block; font-weight: 500; margin-bottom: 0.25rem; }
  .product-options select { width: 100%; padding: 0.5rem; border-radius: 6px; border: 1px solid #ddd; }

  .add-to-cart-btn { margin-top: 1rem; background: #000; color: #fff; padding: 0.75rem 1.5rem; border-radius: 8px; font-weight: 600; cursor: pointer; transition: background 0.2s ease; }
  .add-to-cart-btn:hover { background: #333; }

  /* Toast Modal */
  #cart-toast-modal {
    display: none;
    position: fixed;
    top: 50%; left: 50%;
    transform: translate(-50%, -50%);
    background: #fff;
    padding: 2rem 2.5rem;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.25);
    z-index: 10000;
    text-align: center;
  }
  #cart-toast-modal p { margin-bottom: 1rem; font-size: 1rem; font-weight: 500; }
  #cart-toast-modal button {
    background: #000; color: #fff; padding: 0.6rem 1.4rem;
    border-radius: 8px; border: none; cursor: pointer; font-weight: 600;
    transition: background 0.2s ease;
  }
  #cart-toast-modal button:hover { background: #333; }
</style>

<section class="custom-grid">
  <h2>{{ section.settings.grid_title }}</h2>
  <div class="grid-gallery">
    {% for block in section.blocks %}
      {% if block.settings.product != blank %}
        {% assign product = all_products[block.settings.product] %}
        {% assign first_available_variant = product.variants | where: "available", true | first %}
        <div class="grid-item">
          <img src="{{ product.featured_image | img_url: '500x' }}" alt="{{ product.title }}">
          <h3>{{ product.title }}</h3>
          <p>
            {% if first_available_variant %}
              {{ first_available_variant.price | money }}
            {% else %}
              <span style="color:red;">Sold Out</span>
            {% endif %}
          </p>
          <div class="hotspot" data-product='{{ product | json }}'>+</div>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</section>

<!-- Product Modal -->
<div id="product-modal" class="product-modal">
  <div class="product-modal-content">
    <span class="close-modal">&times;</span>
    <div id="modal-content-inner"></div>
  </div>
</div>

<!-- Cart Toast -->
<div id="cart-toast-modal">
  <p>Product added to cart!</p>
  <button onclick="window.location.href='/cart'">View Cart</button>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const modal = document.getElementById('product-modal');
  const modalInner = document.getElementById('modal-content-inner');
  const closeBtn = document.querySelector('.close-modal');
  const toastModal = document.getElementById('cart-toast-modal');

  function showToast() {
    toastModal.style.display = 'block';
    setTimeout(() => { toastModal.style.display = 'none'; }, 3000);
  }

  document.querySelectorAll('.grid-item .hotspot').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      const product = JSON.parse(this.dataset.product);
      let optionsHtml = '';

      if (product.options.length > 0) {
        product.options.forEach((optName, index) => {
          const values = [...new Set(product.variants.map(v => v.options[index]))];
          const options = values.map(v => `<option value="${v}">${v}</option>`).join('');
          optionsHtml += `<div class="product-options">
            <label>${optName}</label>
            <select data-option-index="${index}">${options}</select>
          </div>`;
        });
      }

      const firstVariantPrice = (product.variants[0].price / 100).toFixed(2);

      modalInner.innerHTML = `
        <h2>${product.title}</h2>
        <img src="${product.images[0]}" />
        <p>${product.description}</p>
        <p style="font-weight:bold;" id="variant-price">Price: $${firstVariantPrice}</p>
        ${optionsHtml}
        <div class="add-to-cart-btn">Add to Cart</div>
      `;

      const priceElement = modalInner.querySelector('#variant-price');
      const addBtn = modalInner.querySelector('.add-to-cart-btn');
      const selects = modalInner.querySelectorAll('select');

      selects.forEach(sel => {
        sel.addEventListener('change', () => {
          const selected = Array.from(selects).map(s => s.value);
          const variant = product.variants.find(v => v.options.every((opt, i) => opt.toLowerCase() === selected[i].toLowerCase()));
          if (variant) priceElement.textContent = 'Price: $' + (variant.price/100).toFixed(2);
        });
      });

      addBtn.addEventListener('click', () => {
        const selectedOptions = Array.from(selects).map(s => s.value);
        const variant = product.variants.find(v => v.options.every((opt, i) => opt.toLowerCase() === selectedOptions[i].toLowerCase()));
        if (!variant) { alert('Selected variant not available'); return; }

        // Add main product
        fetch('/cart/add.js', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ id: variant.id, quantity: 1 })})
        .then(() => {
          // Auto-add Dark Winter Jacket
          const colorIndex = product.options.findIndex(o => o.toLowerCase() === 'color');
          const sizeIndex = product.options.findIndex(o => o.toLowerCase() === 'size');
          const color = selectedOptions[colorIndex] || '';
          const size = selectedOptions[sizeIndex] || '';

          if(color.toLowerCase() === 'black' && size.toLowerCase() === 'medium') {
            fetch('/cart/add.js', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ id: 52989197320564, quantity: 1 })});
          }

          modal.style.display = 'none';
          showToast();
        });
      });

      modal.style.display = 'flex';
    });
  });

  closeBtn.addEventListener('click', () => modal.style.display = 'none');
  window.addEventListener('click', e => { if(e.target === modal) modal.style.display = 'none'; });
});
</script>
